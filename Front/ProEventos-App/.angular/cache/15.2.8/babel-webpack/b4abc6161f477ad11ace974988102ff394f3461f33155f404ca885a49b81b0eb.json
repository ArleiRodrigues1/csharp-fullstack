{"ast":null,"code":"import { Constants } from '@app/util/Constants';\nimport * as i0 from \"@angular/core\";\nexport class DateFormatPipe {\n  transform(value, args) {\n    let newValue = value;\n    if (value && !(value instanceof Date)) {\n      let month = value.substring(0, 2);\n      let day = value.substring(3, 5);\n      let year = value.substring(6, 10);\n      let hour = value.substring(11, 13);\n      let minutes = value.substring(14, 16);\n      newValue = new Date(`${day}/${month}/${year} ${hour}:${minutes}`);\n      return this.transform(newValue, Constants.DATE_TIME_FMT);\n    }\n  }\n}\nDateFormatPipe.ɵfac = function DateFormatPipe_Factory(t) {\n  return new (t || DateFormatPipe)();\n};\nDateFormatPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"DateFormat\",\n  type: DateFormatPipe,\n  pure: true\n});","map":{"version":3,"mappings":"AACA,SAASA,SAAS,QAAQ,qBAAqB;;AAK/C,OAAM,MAAOC,cAAc;EAEzBC,SAAS,CAACC,KAAU,EAAEC,IAAU;IAE9B,IAAIC,QAAQ,GAAGF,KAAK;IAEpB,IAAGA,KAAK,IAAI,EAAEA,KAAK,YAAYG,IAAI,CAAC,EAAC;MACnC,IAAIC,KAAK,GAAGJ,KAAK,CAACK,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC;MAChC,IAAIC,GAAG,GAAGN,KAAK,CAACK,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC;MAC9B,IAAIE,IAAI,GAAGP,KAAK,CAACK,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;MACjC,IAAIG,IAAI,GAAGR,KAAK,CAACK,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;MAClC,IAAII,OAAO,GAAGT,KAAK,CAACK,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;MACrCH,QAAQ,GAAG,IAAIC,IAAI,CAAC,GAAGG,GAAG,IAAIF,KAAK,IAAIG,IAAI,IAAIC,IAAI,IAAIC,OAAO,EAAE,CAAC;MAEjE,OAAO,IAAI,CAACV,SAAS,CAACG,QAAQ,EAAEL,SAAS,CAACa,aAAa,CAAC;;EAE5D;;AAhBWZ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;;QAAdA,cAAc;EAAAa;AAAA","names":["Constants","DateFormatPipe","transform","value","args","newValue","Date","month","substring","day","year","hour","minutes","DATE_TIME_FMT","pure"],"sourceRoot":"","sources":["E:\\ProEventos\\csharp-fullstack\\Front\\ProEventos-App\\src\\app\\helpers\\DateFormat.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { Constants } from '@app/util/Constants';\n\n@Pipe({\n  name: 'DateFormat'\n})\nexport class DateFormatPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    \n    let newValue = value;\n\n    if(value && !(value instanceof Date)){\n      let month = value.substring(0,2);\n      let day = value.substring(3,5);\n      let year = value.substring(6, 10);\n      let hour = value.substring(11, 13);\n      let minutes = value.substring(14, 16);\n      newValue = new Date(`${day}/${month}/${year} ${hour}:${minutes}`);\n\n      return this.transform(newValue, Constants.DATE_TIME_FMT);\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}